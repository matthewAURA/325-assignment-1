<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** (i.e. any resource whose pathname is prefixed 
	     by "/resources/"). The html directory stores the static content, e.g. stylesheets, images etc. -->
	<resources mapping="/resources/**" location="/html/" />
	
	<!-- Setup a ViewResolver that finds views that are Tiles template definitions. The logical view
	     name maps to a Tile definition of the same name. -->
	<beans:bean class="org.springframework.web.servlet.view.tiles2.TilesViewResolver" />
	
	<!-- A TilesViewResolver bean doesn't know anything about Tile definitions. A TilesViewResolver 
	     beans relies on a TilesConfigurer bean to keep track of the required definitions. -->
	<beans:bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<!-- layouts.xml defines the default (common) tile template. -->
				<beans:value>/WEB-INF/layouts/layouts.xml</beans:value>
				<!-- views.xml defines the additional templates for particular views. -->
				<beans:value>/WEB-INF/views/views.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- Used in conjunction with form validation, this bean allows custom messages stored in file
	     messages.properties (located on the classpath in resources/) to be used. -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<beans:property name="basename" value="messages" />
	</beans:bean>
	
	<!-- Scan the com.aucklanduni.spring.mvc.controller package for annotated components. -->
	<context:component-scan base-package="com.matthewdyer.assignment1.mvc.controller com.matthewdyer.assignment1.service" /> 
	
</beans:beans>
